@*
    Copyright (C) 2021 Sascha Manns <Sascha.Manns@outlook.de>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*@

@using System.Net.Http
@using Newtonsoft.Json.Linq
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using MannsBlog.Models
@using MannsBlog.Models;
@using System.Diagnostics

@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject ILogger<ContactComponent> Logger

@code {
    private ContactFormModel ContactFormModel = new ContactFormModel();
    private bool displaySendAlert { get; set; } = false;
    private string alertinfo { get; set; }
    private string alerttextclass { get; set; }
    private string alerttext { get; set; }
    private string btnVisibility = "d-block";
    private string sendVisibility = "d-none";
    string google { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            google = await JSRuntime.InvokeAsync<string>("runCaptcha");
            StateHasChanged();
        }
    }

    private async Task OnSubmit()
    {
        if (google == "")
        {
            google = await JSRuntime.InvokeAsync<string>("runCaptcha");
        }

        Logger.LogInformation("Joined OnSubmit");
        Debug.Write("Joined OnSubmit");
        ContactFormModel.Recaptcha = google;
        btnVisibility = "d-none";
        sendVisibility = "d-inline-block";
        var results = await SubmitForm();

        if (results != "failed")
        {
            Logger.LogInformation("SubmitForm succeeded.");
            var result = JObject.Parse(results);
            if (result.ContainsKey("success") && (bool)result["success"] == true)
            {
                await ShowSuccessAlert();
                ContactFormModel.Name = string.Empty;
                ContactFormModel.Email = string.Empty;
                ContactFormModel.Message = string.Empty;
                ContactFormModel.Subject = string.Empty;
                btnVisibility = "d-block";
                sendVisibility = "d-none";
            }
            else if (result.ContainsKey("message"))
            {
                btnVisibility = "d-block";
                sendVisibility = "d-none";
                ShowErrorAlert((string)result["message"]);
            }
        }
        else
        {
            btnVisibility = "d-block";
            sendVisibility = "d-none";
            ShowErrorAlert("There was a problem submitting the form.");
        }
    }

    private async Task<string> SubmitForm()
    {
        var json = Newtonsoft.Json.JsonConvert.SerializeObject(ContactFormModel);
        var stringContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        var response = await Http.PostAsync("/Contact/SendMessage", stringContent);
        Logger.LogInformation("Executed PostAsync.");
        Debug.Write("Executed PostAsync");

        if (response.IsSuccessStatusCode)
        {
            var resultContent = response.Content.ReadAsStringAsync().Result;
            return resultContent;
        }
        else
            return "failed";
    }

    private async Task ShowSuccessAlert()
    {
        displaySendAlert = true;
        alertinfo = "alert-success";
        alerttextclass = "text-success";
        alerttext = "Sent Successfully";
        Logger.LogInformation("Executed ShowSuccessAlert.");
    }

    private async void ShowErrorAlert(string message)
    {
        displaySendAlert = true;
        alertinfo = "alert-danger";
        alerttextclass = "text-danger";
        alerttext = message;
        Logger.LogInformation("Executed ShowErrorAlert.");
    }
}

@*<div class="control-section col-lg-12">
    <div class="content-wrapper form-group e-input-group">
        <EditForm Model="@ContactFormModel" OnValidSubmit="@OnSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="input-group mt-3">
                <div class="input-group-prepend">
                    <label for="Name" class="bg-black text-light border-black equal-widths">Your Name</label>
                </div>
                <SfTextBox Type="InputType.Text" @bind-Value="@ContactFormModel.Name" Placeholder="Full Name" ID="Name"/>
                <ValidationMessage For="@(() => ContactFormModel.Name)" />
            </div>
            <div class="input-group mt-3">
                <div class="input-group-prepend">
                    <label for="Email" class="bg-black text-light border-black equal-widths">Your Email</label>
                </div>
                <SfTextBox Type="InputType.Email" @bind-Value="@ContactFormModel.Email" Placeholder="Email" ID="Email"/>
                <ValidationMessage For="@(() => ContactFormModel.Email)" />
            </div>
            <div class="input-group mt-3">
                <div class="input-group-prepend">
                    <label for="Subject" class="bg-black text-light border-black equal-widths">Your Subject</label>
                </div>
                <SfTextBox Type="InputType.Text" @bind-Value="@ContactFormModel.Subject" Placeholder="Subject" ID="Subject"/>
                <ValidationMessage For="@(() => ContactFormModel.Subject)" />
            </div>
            <div class="input-group multiline">
                <div class="input-group-prepend">
                    <label for="Message" class="bg-black text-light border-black equal-widths h-100">Your Message</label>
                </div>
                <SfTextBox Type="InputType.Text" @bind-Value="@ContactFormModel.Message" Placeholder="Message" ID="Message" Multiline=true  Width="100" />
                <ValidationMessage For="@(() => ContactFormModel.Message)" />
            </div>
            <div class="sfButton mt-3">
                <SfButton id="submitBtn" CssClass="e-success" type="submit">Submit</SfButton>
            </div>
            <div class="bg-primary text-light rounded p-2 @sendVisibility">
                <i class="fas fa-cog fa-spinner"></i> Sending
            </div>
        </EditForm>
    </div>
</div>*@
<h4>Currently this form is out of order for styling and debugging purposes. For important things or if you know how to get razor forms working, just drop a note to: Sascha[dot]Manns [et] outlook.de</h4>

@if (displaySendAlert == true)
{
    <div id="sendalert" class="alert @alertinfo mt-2">
        <span class="@alerttextclass">@alerttext</span>
    </div>
}